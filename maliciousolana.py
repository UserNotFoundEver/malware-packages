import requests
import json
import re
from bs4 import BeautifulSoup

# List of known malicious packages
malicious_packages = ['raydium', 'raydium-sdk', 'sol-instruct', 'sol-structs', 'spl-types']

# Function to check package metadata
def check_package_metadata(package_name):
    try:
        response = requests.get(f"https://pypi.org/pypi/{package_name}/json")
        if response.status_code == 200:
            data = response.json()
            print(f"Package: {package_name}")
            print(f"Author: {data['info']['author']}")
            print(f"Version: {data['info']['version']}")
            print(f"Dependencies: {data['info']['requires_dist']}")
            return data
        else:
            print(f"Package {package_name} not found on PyPI.")
    except Exception as e:
        print(f"Error fetching metadata for {package_name}: {e}")

# Function to perform static code analysis
def static_code_analysis(package_name):
    # Placeholder for static analysis
    # Implement code to download and analyze the package files
    print(f"Performing static analysis on {package_name}...")
    # Example: Look for suspicious code patterns
    # ... (code to analyze package)
    return True

# Function to scrape community reviews
def scrape_community_reviews(package_name):
    search_url = f"https://stackoverflow.com/search?q={package_name}"
    response = requests.get(search_url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        for result in soup.find_all('div', class_='result-link'):
            link = result.find('a')['href']
            title = result.find('a').text
            print(f"Found discussion: {title}")
            print(f"Link: https://stackoverflow.com{link}")
            # Additional scraping and analysis can be done here

def main():
    # List of packages to check
    packages_to_check = ['raydium', 'raydium-sdk']

    for package in packages_to_check:
        if package in malicious_packages:
            print(f"Warning: {package} is known to be malicious!")
        else:
            metadata = check_package_metadata(package)
            if metadata:
                if static_code_analysis(package):
                    print(f"Static analysis passed for {package}.")
                scrape_community_reviews(package)

if __name__ == "__main__":
    main()
