### security_checker.py make sure to install BeautifulSoup

```python
import requests
import re
from bs4 import BeautifulSoup

malicious_packages = ['raydium', 'raydium-sdk', 'sol-instruct', 'sol-structs', 'spl-types']

def check_package_metadata(package_name):
    try:
        response = requests.get(f"https://pypi.org/pypi/{package_name}/json")
        if response.status_code == 200:
            data = response.json()
            metadata = {
                "name": package_name,
                "author": data['info']['author'],
                "version": data['info']['version'],
                "dependencies": data['info']['requires_dist']
            }
            return metadata
        else:
            return {"error": f"Package {package_name} not found on PyPI."}
    except Exception as e:
        return {"error": str(e)}

def static_code_analysis(package_name):
    # Placeholder for static analysis
    return f"Static analysis placeholder for {package_name}."

def scrape_community_reviews(package_name):
    search_url = f"https://stackoverflow.com/search?q={package_name}"
    response = requests.get(search_url)
    reviews = []
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        for result in soup.find_all('div', class_='result-link'):
            link = result.find('a')['href']
            title = result.find('a').text
            reviews.append(f"Found discussion: {title} (https://stackoverflow.com{link})")
    return reviews

def main(package_name):
    results = {}

    if package_name in malicious_packages:
        results["malicious_warning"] = f"Warning: {package_name} is known to be malicious!"
    else:
        metadata = check_package_metadata(package_name)
        if "error" in metadata:
            results["metadata_error"] = metadata["error"]
        else:
            results["metadata"] = metadata
            results["static_analysis"] = static_code_analysis(package_name)
            results["community_reviews"] = scrape_community_reviews(package_name)

    return results
